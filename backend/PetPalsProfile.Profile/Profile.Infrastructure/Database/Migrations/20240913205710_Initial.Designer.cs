// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Profile.Infrastructure.Database;

#nullable disable

namespace Profile.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240913205710_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("profile")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Profile.Domain.Pets.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Breed")
                        .HasColumnType("text")
                        .HasColumnName("breed");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)")
                        .HasColumnName("description");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("MainPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("main_photo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_pet");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_pet_profile_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_pet_type_id");

                    b.ToTable("pet", "profile");
                });

            modelBuilder.Entity("Profile.Domain.Pets.PetTypes.PetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_pet_type");

                    b.ToTable("pet_type", "profile");
                });

            modelBuilder.Entity("Profile.Domain.Profiles.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)")
                        .HasColumnName("description");

                    b.Property<string>("MainPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("main_photo");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_profile");

                    b.ToTable("profile", "profile");
                });

            modelBuilder.Entity("Profile.Domain.Profiles.ProfileContact", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<int>("ContactType")
                        .HasColumnType("integer")
                        .HasColumnName("contact_type");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("link");

                    b.HasKey("ProfileId", "ContactType")
                        .HasName("pk_profile_contact");

                    b.ToTable("profile_contact", "profile");
                });

            modelBuilder.Entity("Profile.Domain.Subscription.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("SubscribedToId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscribed_to_id");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscriber_id");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("subscription_date");

                    b.Property<DateTime?>("UnsubscriptionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("unsubscription_date");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.HasIndex("SubscribedToId")
                        .HasDatabaseName("ix_subscription_subscribed_to_id");

                    b.HasIndex("SubscriberId")
                        .HasDatabaseName("ix_subscription_subscriber_id");

                    b.ToTable("subscription", "profile");
                });

            modelBuilder.Entity("Profile.Domain.Pets.Pet", b =>
                {
                    b.HasOne("Profile.Domain.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pet_profile_profile_id");

                    b.HasOne("Profile.Domain.Pets.PetTypes.PetType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_pet_pet_type_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Profile.Domain.Profiles.ProfileContact", b =>
                {
                    b.HasOne("Profile.Domain.Profiles.Profile", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_contact_profile_profile_id");
                });

            modelBuilder.Entity("Profile.Domain.Subscription.Subscription", b =>
                {
                    b.HasOne("Profile.Domain.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("SubscribedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_profile_subscribed_to_id");

                    b.HasOne("Profile.Domain.Profiles.Profile", null)
                        .WithMany()
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_profile_subscriber_id");
                });

            modelBuilder.Entity("Profile.Domain.Profiles.Profile", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
